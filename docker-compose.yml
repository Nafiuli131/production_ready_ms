version: "3.8"

services:
  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    ports:
      - "4510:4510"   # LocalStack edge port (all AWS services)
      - "4571:4571"
    environment:
      - SERVICES=s3,sqs,sns,lambda,dynamodb,kafka,ecs,rds,cloudformation
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./localstack_data:/tmp/localstack/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - spring-network

  mysql-db:
    image: mysql:8.0
    container_name: mysql-db-localstack
    environment:
      MYSQL_DATABASE: patient-management
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - "3307:3306"
    volumes:
      - db_data:/var/lib/mysql
    networks:
      - spring-network

  mysql-auth-db:
    image: mysql:8.0
    container_name: mysql-auth-db-localstack
    environment:
      MYSQL_DATABASE: auth-service-db
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
    ports:
      - "3308:3306"
    volumes:
      - auth_db_data:/var/lib/mysql
    networks:
      - spring-network

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - spring-network

  kafka:
    image: confluentinc/cp-kafka:6.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - spring-network

  auth-service:
    build:
      context: ./patient-management/auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      - mysql-auth-db
      - localstack
    ports:
      - "4005:4005"
    networks:
      - spring-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-auth-db:3306/auth-service-db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
      JWT_SECRET: ZyHfC8QvN5RkU3X1c9WmT2kXz7AeD4Lq
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AWS_ENDPOINT: http://localstack:4566

  patient-service:
    build:
      context: ./patient-management/patient-service
      dockerfile: Dockerfile
    container_name: patient-service
    depends_on:
      - mysql-db
      - kafka
      - localstack
    ports:
      - "4000:4000"
    networks:
      - spring-network
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/patient-management
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: ""
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      AWS_ENDPOINT: http://localstack:4566

  billing-service:
    build:
      context: ./patient-management/billing-service
      dockerfile: Dockerfile
    container_name: billing-service
    depends_on:
      - kafka
      - localstack
    ports:
      - "4001:4001"
      - "9001:9001"
    networks:
      - spring-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AWS_ENDPOINT: http://localstack:4566

  analytics-service:
    build:
      context: ./patient-management/analytics-service
      dockerfile: Dockerfile
    container_name: analytics-service
    depends_on:
      - kafka
      - localstack
    networks:
      - spring-network
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      AWS_ENDPOINT: http://localstack:4566

  api-gateway:
    build:
      context: ./patient-management/api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway-localstack
    depends_on:
      - patient-service
      - auth-service
    ports:
      - "4004:4004"
    networks:
      - spring-network
    environment:
      SPRING_PROFILES_ACTIVE: docker
      AUTH_SERVICE_URL: http://auth-service:4005

networks:
  spring-network:

volumes:
  db_data:
  auth_db_data:
  localstack_data:
